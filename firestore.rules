rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /projects/{project} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Fallback for old paragraph records
      function doesNotHaveOwner(resource) {
        return resource == null || resource.data.get('owner', false) == false;
      }

      function didNotChangeOwner(request, resource) {
        return doesNotHaveOwner(resource) || resource.data.owner == request.resource.data.owner
      }

      function owns(resource) {
        return isSignedIn() && (doesNotHaveOwner(resource) || request.auth.uid == resource.data.owner);
      }

      allow create: if owns(request.resource)
      allow update: if owns(resource) && didNotChangeOwner(request, resource)
      allow delete: if owns(resource)
      allow read: if owns(resource);

      match /paragraphs/{paragraph} {
        allow create: if owns(request.resource)
        allow update: if owns(resource) && didNotChangeOwner(request, resource)
        allow delete: if owns(resource)
        allow read: if owns(resource);
      }
    }
  }
}